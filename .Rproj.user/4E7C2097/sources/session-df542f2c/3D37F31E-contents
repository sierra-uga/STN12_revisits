---
title: "berry.16s.tutorial"
author: "Sierra Bartlett"
date: "2023-11-03"
output:
  word_document: default
  html_document: default
editor_options:
  chunk_output_type: console
---

```{r setup, include=FALSE}
library("ggplot2")
library("vegan")
library("dplyr")
library("scales")
library("grid")
library("reshape2")
library("phyloseq")
library("qiime2R")
library("tidyr")
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r import_data}
# importing feature table into phyloseq
ASV <- qza_to_phyloseq(features="table.qza")

# importing metadata
metatable <- read.delim("artemis-eDNA-metadata-final.tsv", sep="\t", header=TRUE)
```

```{r import_data}
# fixing numerical problems, remove blanks
metatable <- filter(metatable, Sample.Control == "True.Sample") %>% 
  mutate_at(c(20:27, 29:38, 44), as.numeric) 

```

```{r import_data}
#importing (continued)
row.names(metatable) <- metatable[["SampleID"]]
metatable <- metatable %>% select(SampleID, everything())

#fixing metatable location_in_polynya
metatable[metatable == "Getz_Ice_shelf"] <- "Getz_Ice_Shelf"
metatable[metatable == "Off_Ice_shelf"] <- "Off_Ice_Shelf"

#convert to phyloseq object
META = sample_data(metatable)

#importing taxonomy
taxonomy <- read.delim("taxonomy.tsv", sep="\t", header=TRUE)
names(taxonomy) <- c("row", "tax", "Confidence")
row.names(taxonomy) <-taxonomy[[1]]
taxonomy <- taxonomy[,(-1)]

#SILVA taxonomy is in one column, separate to be able to work with different taxonomic levels:
taxonomy <-  separate(taxonomy, tax, c("D0","D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "D14"), sep = ";", fill = "right")
#Keep the first 8 taxonomic levels (no assignments afetr that)
taxonomy <- taxonomy[,c(1:8)]
#take the weird D_3__ out... would have to do for other taxa as well
taxonomy$D3 <- as.character(taxonomy$D3)
taxonomy$D3 <- gsub('D_.__', '', taxonomy$D3)
taxmat <- as.matrix(taxonomy)
#covert taxonomy table to phyloseq object
TAX = tax_table(taxmat)

# import rooted tree
TREE = qza_to_phyloseq(tree="rooted-tree.qza")

# merge all imported objects into phyloseq
ps = merge_phyloseq(ASV, TAX, META, TREE)
ps
```


```{r}
huh <- tax_glom(ps_sub, "Genus")
```

## analysis

```{r taxonomy ranks, echo=FALSE}
colnames(tax_table(ps))
colnames(tax_table(ps)) <- c("Kingdom", "Phylum", "Class", 
  "Order", "Family", "Genus", "Species", "NA")

highPrev <- c("D_1__Actinobacteriota", "D_1__Acidobacteriota", "D_1__AncK6", "D_1__Bacteroidota", "D_1__Bdellovibrionota", "D_1__Campilobacterota", "D_1__Chloroflexi", "D_1__Crenarchaeota", "D_1__Desulfobacterota", "D_1__Fibrobacterota", "D_1__Firmicutes", "D_1__Gemmatimonadota", "D_1__Halobacterota", "D_1__Marinimicrobia (SAR406 clade)", "D_1__Myxococcota", "D_1__NB1-j", "D_1__Nitrospinota", "D_1__PAUC34f", "D_1__Planctomycetota", "D_1__Proteobacteria", "D_1__SAR324 clade(Marine group B)", "D_1__Thermoplasmatota", "D_1__Verrucomicrobiota")
psNHighPrev<- subset_taxa(ps, Phylum %in% highPrev)
```

free-living samples only
```{r}
### durapore samples only!
ps_sub <- ps %>%
  subset_samples(Sample.Control == "True.Sample") %>%
  prune_taxa(taxa_sums(.) > 0, .)

erie <- ps_sub %>%
  subset_taxa(
    Kingdom == "D_0__Bacteria" &
    Family  != "D_4__Mitochondria" &
    Class   != "Chloroplast" &
    Order   != "Chloroplast" &
    Family  != "D_4__Mitochondria" 
  )

erie <- erie %>% subset_samples(Filter_pores == "0.2") # select only free-living
erie <- erie %>% subset_samples(Station != "STN089") # exclude pine-isalnd station

#below is looking at only subset samples of True flow (inflow/outflow)
erie_flow <- erie %>% subset_samples(True_Flow != "Blank") 
erie_flow <- erie_flow %>% subset_samples(True_Flow != "NA")
#take out stn 68 (maybe too far out from outflow?)
#erie_flow <- erie_flow %>% subset_samples(Station != "STN068")
# also 106, catching coastal current?
#erie_flow <- erie_flow %>% subset_samples(Station != "STN106")
# also 22, weird outlier
#erie_flow <- erie_flow %>% subset_samples(Station != "STN22")

```

# particle-associated taxa
```{r}
### particle associated only
ps_sub <- psNHighPrev %>%
  subset_samples(Sample.Control == "True.Sample") %>%
  prune_taxa(taxa_sums(.) > 0, .)

erie_part <- ps_sub %>%
  subset_taxa(
    Kingdom == "D_0__Bacteria" &
    Family  != "D_4__Mitochondria" &
    Class   != "Chloroplast" &
    Order   != "Chloroplast" &
    Family  != "D_4__Mitochondria" 
  )

erie_part <- erie_part %>% subset_samples(Filter_pores >= "2") # select only free-living
erie_part <- erie_part %>% subset_samples(Station != "STN089")
erie_part <- erie_part %>% subset_samples(Station != "STN056")# exclude pine-isalnd station
```

#freq chart
```{r}
sample_sum_df <- data.frame(sum = sample_sums(erie_part))

# Histogram of sample read counts
ggplot(sample_sum_df, aes(x = sum)) + 
  geom_histogram(color = "black", fill = "indianred", binwidth = 2500) +
  ggtitle("Distribution of sample sequencing depth") + 
  xlab("Read counts") +
  theme(axis.title.y = element_blank())
```

# colors 
```{r}
colors <- c("Alteromonadales"="#960E10", 
"Bacteriovoracales"="#ACE3EC",
"Cellvibrionales"="darkgray", 
"Chitinophagales"="#57B2C7", 
"Flavobacteriales"="#398B93", 
"Oceanospirillales"="#AF4C0E",
"Phycisphaerales"="#575757", 
"Pirellulales"="#2F2F2F", 
"Planctomycetales"="#560E4F", 
"Pseudomonadales"="#34666F", 
"Rhodobacterales"="#C75759",
"SAR11 clade"="#22443D", 
"Thiomicrospirales"="#F6C000", 
"Verrucomicrobiales"="darkgreen", 
"Vibrionales"="#424242", 
"Burkholderiales"="#476C37", 
"Candidatus Kaiserbacteria"="#a87672", 
"HOC36"="#383838", 
"Microtrichales"="#622A00", 
"Nitrospinales"="#AA5CA3", 
"OM182 clade"="#141414", 
"Rhizobiales"="#38502B", 
"Rhodospirillales"="#98BE89",
"SAR86 clade"="lightgray")
```

#Stacked barplots (freeliving)
```{r station free}
# melt to long format (for ggploting) 
# prune out phyla below 2% in each sample

erie_new <- subset_samples(erie, Depth_Threshold == "Surface" | Depth_Threshold == "Bottom_water")

erie_class <- erie_new %>%
  tax_glom(taxrank = "Order") %>%                     # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  filter(Abundance > 0.02) %>%                         # Filter out low abundance taxa
  arrange(Order)     

#Setting colors for plotting
plot_labels <- unique(sample_data(erie_new)$Station)
plot_breaks <- unique(sample_data(erie_new)$Station)

# Plot 
barplot_free <- ggplot(erie_class, aes(x = Station, y = Abundance, fill = Order)) + facet_grid(~factor(Depth_Threshold, levels=c("Surface", "Bottom_water"))~.) + 
  geom_bar(stat = "identity", position="fill", width=0.9) + theme_classic() +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_manual(values = colors) +
  scale_x_discrete(
    breaks = plot_breaks,
    labels = plot_labels,
    drop = FALSE
  ) +
  # Remove x axis title
  theme(plot.title = element_text(hjust = 0.5, size=17)) +
  theme(axis.title.x = element_blank()) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  theme(axis.title.y = element_text(size=13, vjust=-3)) +
  theme(strip.background = element_blank()) +
  theme(strip.text.y = element_blank()) +
  theme(legend.position = "none") +
  theme(panel.spacing.y = unit(1, "lines")) +
  guides(fill = guide_legend(reverse = FALSE, keywidth = 1, keyheight = 1)) +
  ylab("Relative Abundance (Order > 2%) \n") +
  ggtitle("Free-living (<0.2 µm)")
  ggsave("Order_abundance_FREE-LIVING.pdf", width = 8, height = 6, dpi = 150)

  barplot_free
```

```{r abundance chart for ice shelf vs open polynya}
# melt to long format (for ggploting) 
# prune out phyla below 2% in each sample
erie_new2 <- subset_samples(erie, Location_in_polynya == "Dotson_Ice_Shelf" | Location_in_polynya == "Open_polynya")

erie_class <- erie_new2 %>%
  tax_glom(taxrank = "Order") %>%                      # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  filter(Abundance > 0.02) %>%                         # Filter out low abundance taxa
  arrange(Order)     

#Setting colors for plotting
plot_labels2 <- unique(sample_data(erie_new2)$Depth_Threshold)
plot_breaks2 <- unique(sample_data(erie_new2)$Depth_Threshold)

# Plot 
bar_depth_free <- ggplot(erie_class, aes(x = Depth_Threshold, y = Abundance, fill = Order)) + 
  facet_grid(~factor(Location_in_polynya, levels=c("Dotson_Ice_Shelf", "Open_polynya"))~.) + 
  geom_bar(stat = "identity", position="fill", width=0.9) + theme_classic() +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_manual(values = colors) +
  scale_x_discrete(
    breaks = plot_labels2,
    labels = plot_breaks2, 
    drop = FALSE
  ) +
  # Remove x axis title
  theme(plot.title = element_text(hjust = 0.5, size=17)) +
  theme(axis.title.x = element_blank()) + 
  theme(axis.text.x = element_text(vjust = 0.5, hjust=0.5)) +
  theme(axis.title.y = element_text(size=13, vjust=-3)) +
  theme(strip.background = element_blank()) +
  theme(strip.text.y = element_blank()) +
  theme(legend.position = "none") +
  theme(panel.spacing.y = unit(1, "lines")) +
  #
  guides(fill = guide_legend(reverse = FALSE, keywidth = 1, keyheight = 1)) +
  ylab("Relative Abundance (Phyla > 2%) \n") +
  ggtitle("Free-living (<0.2 µm)")
  ggsave("Class_abundance_plot_03_freeliving.pdf", width = 8, height = 6, dpi = 150)
```

#unique
```{r}
#write.table(unique(matrix(as.character(v3)),nrow=1), sep=",",
#              row.names=FALSE, col.names=FALSE)

v1 <- unique(dput(as.character(erie_class_part$Order)))
v2 <- unique(dput(as.character(erie_class$Order)))

#unique(v3)
v3 <- c(v1, v2)
```

#Stacked barplots (particle associated)
```{r station particle}
# melt to long format (for ggploting) 
# prune out phyla below 2% in each sample
erie_new_part <- subset_samples(erie_part, Depth_Threshold == "Surface" | Depth_Threshold == "Bottom_water")

erie_class_part <- erie_new_part %>%
  tax_glom(taxrank = "Order") %>%                     # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  filter(Abundance > 0.02) %>%                         # Filter out low abundance taxa
  arrange(Order)     


#Setting colors for plotting
plot_labels3 <- unique(sample_data(erie_class_part)$Station)
plot_breaks3 <- unique(sample_data(erie_class_part)$Station)

# Plot 
barplot_part <- ggplot(erie_class_part, aes(x = Station, y = Abundance, fill = Order)) + facet_grid(~factor(Depth_Threshold, levels=c("Surface", "Bottom_water"))~.,) +
  geom_bar(stat = "identity", position="fill", width=0.9) + theme_classic() +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_manual(values = colors) +
  scale_x_discrete(
    breaks = plot_breaks3,
    labels = plot_labels3,
    drop = FALSE
  ) +
  # Remove x axis title
  theme(plot.title = element_text(hjust = 0.5, size=17)) +
  theme(axis.title.x = element_blank()) + 
  theme(axis.text.y = element_blank()) +
  theme(axis.title.y = element_blank()) +
  theme(legend.position = "none") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  theme(panel.spacing.y = unit(1, "lines")) +
  guides(fill = guide_legend(reverse = FALSE, keywidth = 1, keyheight = 1)) +
  ylab("Relative Abundance (Class > 2%) \n") +
  ggtitle("Particle-associated (>3 µm)")
  ggsave("Order_abundance_Particle.pdf", width = 8, height = 6, dpi = 150)
  
```

```{r}
# melt to long format (for ggploting) 
# prune out phyla below 2% in each sample
erie_new2_part2 <- subset_samples(erie_part, Location_in_polynya == "Dotson_Ice_Shelf" | Location_in_polynya == "Open_polynya")

erie_class2_part <- erie_new2_part2 %>%
  tax_glom(taxrank = "Order") %>%                      # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  filter(Abundance > 0.02) %>%                         # Filter out low abundance taxa
  arrange(Order)     

#Setting colors for plotting
plot_labels4 <- unique(sample_data(erie_new2)$Depth_Threshold)
plot_breaks4 <- unique(sample_data(erie_new2)$Depth_Threshold)

# Plot 
bar_depth_part <- ggplot(erie_class2_part, aes(x = Depth_Threshold, y = Abundance, fill = Order)) + 
  facet_grid(~factor(Location_in_polynya, levels=c("Dotson_Ice_Shelf", "Open_polynya"))~.) +
  geom_bar(stat = "identity", position="fill", width=0.9) + theme_classic() +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_manual(values = colors) +
  scale_x_discrete(
    breaks = plot_labels4,
    labels = plot_breaks4, 
    drop = FALSE
  ) +
  # Remove x axis title
  theme(plot.title = element_text(hjust = 0.5, size=17)) +
  theme(axis.title.x = element_blank()) + 
  theme(axis.text.y = element_blank()) +
  theme(axis.title.y = element_blank()) +
  theme(axis.text.x = element_text(vjust = 0.5, hjust=0.5)) +
  theme(panel.spacing.y = unit(1, "lines")) +
  theme(legend.position = "none") +
  #
  guides(fill = guide_legend(reverse = FALSE, keywidth = 1, keyheight = 1)) +
  ylab("Relative Abundance (Phyla > 2%) \n") +
  ggtitle("Particle-associated (>3 µm)")
  ggsave("Class_abundance_plot_03_freeliving.pdf", width = 8, height = 6, dpi = 150)
```

#combine station bar plots
```{r}
library(ggpubr)
ggarrange(barplot_free, barplot_part, ncol=2, common.legend = FALSE, legend=NULL)
ggsave("combined.pdf", width = 8, height = 6, dpi = 150)

legend <- get_legend(barplot_free, position = "right")
as_ggplot(legend)
ggsave("legend_surf_bot_freeliving.pdf", width = 8, height = 6, dpi = 150)

legend2 <- get_legend(barplot_part, position = "right")
as_ggplot(legend2)
ggsave("legend_surf_bot_part.pdf", width = 8, height = 6, dpi = 150)

```

#combine depth_Threshold bar plots
```{r}
library(ggpubr)
ggarrange(bar_depth_free, bar_depth_part, ncol=2, common.legend = FALSE, legend=NULL)
ggsave("combined_depth.pdf", width = 8, height = 6, dpi = 150)

legend3 <- get_legend(bar_depth_free, position = "right")
as_ggplot(legend3)
ggsave("legend_dot_open_free.pdf", width = 8, height = 6, dpi = 150)

legend4 <- get_legend(bar_depth_part, position = "right")
as_ggplot(legend4)

ggsave("legend_dot_open_part.pdf", width = 8, height = 6, dpi = 150)
```


#unconstrained ordinations
```{r}
myround <- function(x) { trunc(x + 0.5) }
scale_reads <- function(physeq, n = min(sample_sums(physeq)), round = "floor") {
  
  # transform counts to n
  physeq.scale <- transform_sample_counts(physeq, 
    function(x) {(n * x/sum(x))}
  )
  
  # Pick the rounding functions
  if (round == "floor"){
    otu_table(physeq.scale) <- floor(otu_table(physeq.scale))
  } else if (round == "round"){
    otu_table(physeq.scale) <- myround(otu_table(physeq.scale))
  }
  
  # Prune taxa and return new phyloseq object
  physeq.scale <- prune_taxa(taxa_sums(physeq.scale) > 0, physeq.scale)
  return(physeq.scale)
}

erie_scale <- erie

sample_data(erie_scale)$Flow_of_CDW <- factor(
  sample_data(erie_scale)$Flow_of_CDW, 
  levels = unique(sample_data(erie_scale)$Flow_of_CDW)
)

# Ordinate
erie_nmds <- ordinate(
  physeq = erie_flow, 
  method = "NMDS", 
  distance = "bray"
)

# Plot 
plot_ordination(
  physeq = erie_flow,
  ordination = erie_nmds,
  color = "Station",
  shape = "True_Flow",
  title = "PCoA of ASP bacterial Communities"
) + 
  scale_color_manual(values = c("red", "#a65628", "#ffae19",
    "#4daf4a", "#1919ff", "darkorchid3", "magenta", "yellow")
  ) +
  geom_point(aes(color = Station), alpha = 0.7, size = 4) +
  geom_point(colour = "grey90", size = 1.5) 

```

# Constratined Ordinations
```{r}
# Remove data points with missing metadata
erie_not_na <- erie %>%
  subset_samples(
    !is.na(Lab_NO3) & 
      !is.na(watertype) &
      !is.na(Location_in_polynya) & 
      !is.na(Lab_PO4) & 
      !is.na(Lab_NH4)
  )
    
bray_not_na <- phyloseq::distance(physeq = erie_not_na, method = "bray")

                            
# CAP ordinate
cap_ord <- ordinate(
    physeq = erie_not_na, 
    method = "CAP",
    distance = bray_not_na,
    formula = ~ Lab_NO3 + Lab_PO4 + Lab_NH4 + Oxygen + CTD_Depth + Temperature + Salinity
)

# CAP plot
cap_plot <- plot_ordination(
  physeq = erie_not_na, 
  ordination = cap_ord, 
    color = "watertype", 
    axes = c(1,2)
) + 
    aes(shape = Flow_of_CDW) + 
    geom_point(aes(colour = watertype), alpha = 0.4, size = 4) + 
    geom_point(colour = "grey90", size = 1.5) + 
    scale_color_manual(values = c("#a65628", "red", "#ffae19", "#4daf4a", 
        "#1919ff", "darkorchid3", "magenta")
    )


# Now add the environmental variables as arrows
arrowmat <- vegan::scores(cap_ord, display = "bp")

# Add labels, make a data.frame
arrowdf <- data.frame(labels = rownames(arrowmat), arrowmat)

# Define the arrow aesthetic mapping
arrow_map <- aes(xend = CAP1, 
    yend = CAP2, 
    x = 0, 
    y = 0, 
    shape = NULL, 
    color = NULL, 
    label = labels)

label_map <- aes(x = 1.3 * CAP1, 
    y = 1.3 * CAP2, 
    shape = NULL, 
    color = NULL, 
    label = labels)

arrowhead = arrow(length = unit(0.02, "npc"))

# Make a new graphic
cap_plot + 
  geom_segment(
    mapping = arrow_map, 
    size = .5, 
    data = arrowdf, 
    color = "gray", 
    arrow = arrowhead
  ) + 
  geom_text(
    mapping = label_map, 
    size = 4,  
    data = arrowdf, 
    show.legend = FALSE
  )

ggsave("Constrained_Principle_Analysis.pdf", width = 8, height = 6, dpi = 150)

anova(cap_ord)
```

```{r nMDS with CTD Depth}
set.seed(1)

#unique station names = scale color
color_breaks <- unique(sample_data(erie)$Location_in_polynya)
shape_breaks <- unique(sample_data(erie)$Depth_Threshold)

erie_sub <- erie %>% subset_samples(Location_in_polynya != "Off_Ice_Shelf")

# Ordinate
erie_nmds <- ordinate(
  physeq = erie_sub, 
  method = "NMDS", 
  distance = "bray"
)

my_plot <- plot_ordination(
  physeq = erie,
  ordination = erie_nmds,
  color = "Location_in_polynya",
  shape = "Depth_Threshold",
  title = "NMS of ASP Bacterial Communities based on Location and Depth"
) +
  scale_color_manual(values = c("#960E10", "#57B2C7", "#476C37", "#476C37", "#293021"),
                     name = "Location_in_polynya",
                     breaks = color_breaks,
                     labels = color_breaks)+
  scale_shape_manual(values = c(1, 16, 8),
                     name = "Depth_Threshold",
                     breaks = shape_breaks,
                     labels = shape_breaks)+
  geom_point(aes(color = Location_in_polynya), alpha = 0.7, size = 4) +
  annotate("text", x = -1.6, y = -1.7, label ="2D Stress: 0.11")

#takes away grid from ggplot
my_plot + theme(legend.position = "bottom") + theme_bw() + 
  theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggsave("NMS.pdf", width = 8, height = 6, dpi = 150)
```

```{r}
set.seed(1)

metatable$Depth_Threshold <- as.factor(metatable$Depth_Threshold)

set.seed(1)
OTUs <- t(data.frame(otu_table(physeqPra))) #get data frame of symbiont SVs from phyloseq object object
meta <- metatable[metatable$Sample.Control=="True.Sample",]
meta <- metatable[metatable$Filter_pores=="0.2",] 

#selection of data from main data frame
mydata2 <- select(meta, Station, Depth_Threshold:Location_in_polynya)
# filter sample data to include ONLY the samples included in this analysis. Otherwise, adonis will give an error. 

adonis2(vegdist(OTUs, method = "bray") ~ Station, data = mydata2)


```

permanova for freeliving
```{r pERMANOVA for 0.2}
#THIS WORKS
#selection of data from main data frame
erie_bray <- phyloseq::distance(erie_flow, method = "bray")
# make a data frame from the sample_data
sampledf <- data.frame(sample_data(erie_flow))
str(sampledf)
#select from main dataframe
mydata3 <- select(sampledf, Station, Salinity:CTD_Depth, Filter_pores, Depth_Threshold:True_Flow)
mydata3$Depth_Threshold <- as.factor(mydata3$Depth_Threshold)
mydata3$Station <- as.factor(mydata3$Station)
mydata3$watertype <- as.factor(mydata3$watertype)
mydata3$Flow_of_CDW <- as.factor(mydata3$Flow_of_CDW)
mydata3$Location_in_polynya <- as.factor(mydata3$Location_in_polynya)
mydata3$True_Flow <- as.factor(mydata3$True_Flow)
str(mydata3)
# Adonis test
adonis <- adonis2(erie_bray ~ True_Flow, data = mydata3)

#post hoc
beta <- betadisper(erie_bray, mydata3$True_Flow)
permutest(beta)
#if the dispersion is different between groups, then examine
plot(beta)
boxplot(beta)
mod.HSD <- TukeyHSD(beta)
mod.HSD
plot(mod.HSD, las=1)
#95% cof int out open-polynya + dotson
```

pairwise adonis
```{r}
library(devtools)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis") 
library(pairwiseAdonis)
pair <- pairwise.adonis(erie_bray, sample_data(erie_flow)$True_Flow)
pair
pair2
pair3
pair2 <- pairwise.adonis(erie_bray, sample_data(erie)$Location_in_polynya)

pair3 <- pairwise.adonis(erie_bray, sample_data(erie)$Depth_Threshold)
#Depth_Threshold + (open-polynya + dotson) significant
```

